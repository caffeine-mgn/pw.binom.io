headers = openssl/ssl.h
headerFilter = openssl/**
linkerOpts = -lwsock32 -lws2_32
---
#undef EVP_PKEY_CTX_set_rsa_keygen_bits

int EVP_PKEY_CTX_set_rsa_keygen_bits(EVP_PKEY_CTX* ctx, int bits){
    return RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_RSA_KEYGEN_BITS, bits, NULL);
}

int internal_BIO_should_retry(BIO *bp){
    return BIO_test_flags(bp, BIO_FLAGS_SHOULD_RETRY);
}

long internal_BIO_do_connect(BIO *bp){
    return BIO_do_connect(bp);
}

long internal_BIO_do_accept(BIO *bp){
    return BIO_do_connect(bp);
}

BIO* internal_BIO_new_fp(int fd){
    return BIO_new_fp(fd, BIO_NOCLOSE);
}

long internal_BIO_set_conn_hostname(BIO*bp, char* host){
    return BIO_set_conn_hostname(bp, host);
}

long internal_BIO_do_handshake(BIO*bp){
    return BIO_do_handshake(bp);
}

void print_ssl_error(){
    ERR_print_errors_fp(stderr);
}

char* getSSLError(int ret){
    char *msg=(char *)malloc(1024);
    SSL_load_error_strings();
    ERR_error_string_n(ret, msg, 1024);
    return msg;
}

void print_ssl_error2(){
      printf("Getting error\n");
      //ERR_load_crypto_strings();
      SSL_load_error_strings(); // just once
      char msg[1024];
      ERR_error_string_n(ERR_get_error(), msg, sizeof(msg));
      printf("%s %s %s %s\n", msg, ERR_lib_error_string(0), ERR_func_error_string(0), ERR_reason_error_string(0));
}

//get_supported_ciphers(SSL*ssl){
//    SSL_get1_supported_ciphers(ssl)
//}