apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.kotlin.multiplatform'


import org.jetbrains.kotlin.konan.target.Architecture
import org.jetbrains.kotlin.konan.target.Family
import org.jetbrains.kotlin.konan.target.KonanTarget
import pw.binom.plugins.BuildStaticTask

def getLinkArgs(target) {
    return [
            '-include-binary', file("${buildDir}/native/crypto/${target.konanTarget.name}/libcrypto.a").absolutePath,
            '-include-binary', file("${buildDir}/native/ssl/${target.konanTarget.name}/libopenssl.a").absolutePath
    ]
}

kotlin {

    linuxX64 { // Use your target instead.
        def task = it
        binaries {
            staticLib()
            compilations.main {
                kotlinOptions.freeCompilerArgs = getLinkArgs(task)

                cinterops {
                    openssl {
                        defFile project.file("src/cinterop/openssl.def")
                        packageName 'platform.openssl'
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/native/include"
                    }
                }
            }
            compilations.test.kotlinOptions.freeCompilerArgs = getLinkArgs(task)
        }
    }

    linuxArm32Hfp { // Use your target instead.
        def task = it
        binaries {
            staticLib()
            compilations.main {
                kotlinOptions.freeCompilerArgs = getLinkArgs(task)

                cinterops {
                    openssl {
                        defFile project.file("src/cinterop/openssl.def")
                        packageName 'platform.openssl'
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/native/include"
                    }
                }
            }
            compilations.test.kotlinOptions.freeCompilerArgs = getLinkArgs(task)
        }
    }

    mingwX64 { // Use your target instead.
        def task = it
        binaries {

            staticLib()
            compilations.main {
                cinterops {
                    openssl {
                        defFile project.file("src/cinterop/openssl.def")
                        packageName 'platform.openssl'
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/native/include"
                    }
                }

                kotlinOptions.freeCompilerArgs = getLinkArgs(task)
            }
            compilations.test.kotlinOptions.freeCompilerArgs = getLinkArgs(task)
        }
    }

    mingwX86 { // Use your target instead.
        def task = it
        binaries {
            staticLib()
            compilations.main {
                cinterops {
                    openssl {
                        defFile project.file("src/cinterop/openssl.def")
                        packageName 'platform.openssl'
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/native/include"
                    }
                }

                kotlinOptions.freeCompilerArgs = getLinkArgs(task)
            }
            compilations.test.kotlinOptions.freeCompilerArgs = getLinkArgs(task)
        }
    }

    macosX64 { // Use your target instead.
        def task = it
        binaries {
            staticLib()
            compilations.main {
                cinterops {
                    openssl {
                        defFile project.file("src/cinterop/openssl.def")
                        packageName 'platform.openssl'
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/native/include"
                    }
                }

                kotlinOptions.freeCompilerArgs = getLinkArgs(task)
            }
            compilations.test.kotlinOptions.freeCompilerArgs = getLinkArgs(task)
        }
    }

    jvm {
        compilations.all {
            kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

    sourceSets {

        commonMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                api project(":core")
                api project(":socket")
                api project(":file")
                api project(":date")
                api project(":thread")
            }
        }

        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation project(":job")
            }
        }

        nativeMain {
            dependencies {
                dependsOn commonMain
            }
        }

        linuxX64Main {
            dependencies {
                dependsOn mingwX64Main
            }
        }

        linuxArm32HfpMain {
            dependencies {
                dependsOn linuxX64Main
            }
        }

        macosX64Main {
            dependencies {
                dependsOn linuxX64Main
            }
        }

        mingwX64Main {
            dependencies {
                dependsOn commonMain
            }
        }

        mingwX86Main {
            dependencies {
                dependsOn mingwX64Main
            }
        }

        jvmMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                api group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.61'
                api group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.61'
            }
        }

        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
            }
        }

        sourceSets.all {
            languageSettings {
                progressiveMode = true
            }
        }
    }
}

def defineCryptoBuild(KonanTarget selectTarget) {
    BuildStaticTask task = tasks.create("buildCrypto${selectTarget.name.capitalize()}", BuildStaticTask.class)
    task.target = selectTarget
    task.include(file("${buildFile.parentFile}/src/native/include"))
    task.include(file("${buildFile.parentFile}/src/native"))
    task.include(file("${buildFile.parentFile}/src/native/crypto/modes"))
    task.include(file("${buildFile.parentFile}/src/native/crypto/ec/curve448/arch_32"))
    task.include(file("${buildFile.parentFile}/src/native/crypto/ec/curve448"))
    task.compileArgs(
            "-DOPENSSLDIR=\"/tmp/ssl\"",
            "-DENGINESDIR=\"/tmp/ssl/engine\""
    )
    task.compileDir(
            file("${buildFile.parentFile}/src/native/crypto"),
            file("${buildDir}/native/crypto/${selectTarget.name}"),
            null,
            { it ->
                Family family = selectTarget.getFamily()
                Architecture architecture = selectTarget.getArchitecture()
                String filePath = it.absolutePath.replace('\\', '/')
                if (filePath.endsWith("native/crypto/LPdir_win.c")) {
                    return family == Family.MINGW && architecture == Architecture.X64
                }
                if (filePath.endsWith("native/crypto/LPdir_win32.c")) {
                    return family == Family.MINGW && architecture == Architecture.X86
                }
                if (filePath.endsWith("native/crypto/armcap.c")) {
                    return architecture == Architecture.ARM32 || architecture == Architecture.ARM64
                }

                if (filePath.endsWith("native/crypto/poly1305/poly1305_base2_44.c")
                    || filePath.endsWith("native/crypto/poly1305/poly1305_ieee754.c")
                    || filePath.endsWith("native/crypto/bn/asm/x86_64-gcc.c")
                ) {
                    return architecture != Architecture.ARM32 && architecture != Architecture.ARM64
                }

                if (filePath.endsWith("native/crypto/LPdir_wince.c")
                        || filePath.endsWith("native/crypto/engine/eng_devcrypto.c")
                        || filePath.endsWith("native/crypto/LPdir_nyi.c")
                        || filePath.endsWith("native/crypto/ec/ecp_nistz256_table.c")
                        || filePath.endsWith("native/crypto/ec/curve448/field.h")
                        || filePath.endsWith("native/crypto/rc5")
                        || filePath.endsWith("native/crypto/LPdir_unix.c")
                        || filePath.endsWith("native/crypto/LPdir_vms.c")
                        || filePath.endsWith("native/crypto/md2/md2_dgst.c")
                        || filePath.endsWith("native/crypto/md2/md2_one.c")
                ) {
                    println("$it -> false")
                    return false
                }
                println("$it -> true")
                return true
            }
    )
    task.staticFile = file("${buildDir}/native/crypto/${selectTarget.name}/libcrypto.a")
}

def defineOpensslBuild(KonanTarget selectTarget) {
    BuildStaticTask task = tasks.create("buildOpenssl${selectTarget.name.capitalize()}", BuildStaticTask.class)
    task.target = selectTarget
    task.include(file("${buildFile.parentFile}/src/native/include"))
    task.include(file("${buildFile.parentFile}/src/native"))
    task.include(file("${buildFile.parentFile}/src/native/crypto/modes"))
    task.include(file("${buildFile.parentFile}/src/native/crypto/ec/curve448/arch_32"))
    task.include(file("${buildFile.parentFile}/src/native/crypto/ec/curve448"))
    task.compileArgs(
            "-DOPENSSLDIR=\"/tmp/ssl\"",
            "-DENGINESDIR=\"/tmp/ssl/engine\""
    )
    task.compileDir(
            file("${buildFile.parentFile}/src/native/ssl"),
            file("${buildDir}/native/ssl/${selectTarget.name}")
    )
    task.staticFile = file("${buildDir}/native/ssl/${selectTarget.name}/libopenssl.a")
}

defineCryptoBuild(KonanTarget.MINGW_X86.INSTANCE)
defineCryptoBuild(KonanTarget.MINGW_X64.INSTANCE)
defineCryptoBuild(KonanTarget.LINUX_X64.INSTANCE)
defineCryptoBuild(KonanTarget.LINUX_ARM32_HFP.INSTANCE)

defineOpensslBuild(KonanTarget.MINGW_X86.INSTANCE)
defineOpensslBuild(KonanTarget.MINGW_X64.INSTANCE)
defineOpensslBuild(KonanTarget.LINUX_X64.INSTANCE)
defineOpensslBuild(KonanTarget.LINUX_ARM32_HFP.INSTANCE)

compileKotlinLinuxX64 {
    dependsOn buildCryptoLinux_x64
    dependsOn buildOpensslLinux_x64
}

compileKotlinLinuxArm32Hfp {
    dependsOn buildCryptoLinux_arm32_hfp
    dependsOn buildOpensslLinux_arm32_hfp
}



compileKotlinMingwX64 {
    dependsOn buildOpensslMingw_x64
    dependsOn buildCryptoMingw_x64
}

compileKotlinMingwX86 {
    dependsOn buildOpensslMingw_x86
    dependsOn buildCryptoMingw_x86
}

apply from: '../public.gradle'