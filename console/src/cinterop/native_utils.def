---
#ifdef _WIN32
    #include <windows.h>
//    #include <cstdio>
#else
    #include <sys/ioctl.h>
    #include <stdio.h>
    #include <unistd.h>
    #include <termios.h>
#endif


int internal_terminal_get_size(int* width, int* height)
{
#ifdef _WIN32
    CONSOLE_SCREEN_BUFFER_INFO csbi;

    if (GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &csbi) == 0){
        return 0;
    }

    *width = csbi.srWindow.Right - csbi.srWindow.Left + 1;
    *height = csbi.srWindow.Bottom - csbi.srWindow.Top + 1;
#else
    struct winsize w;
    if (ioctl(STDOUT_FILENO, TIOCGWINSZ, &w) != 0) {
        return 0;
    }
    *width = (int)w.ws_col;
    *height = (int)w.ws_row;
#endif
    return 1;
}

int internal_terminal_set_cursor_position(int x, int y){
#ifdef _WIN32
    COORD Coord;

    Coord.X = x;
    Coord.Y = y;

    if (SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Coord) == 0){
        return 0;
    }
#else
    printf("\033[%d;%dH", y + 1, x + 1);
#endif
return 1;
}

int internal_terminal_get_cursor_position(int* x, int* y){
#ifdef _WIN32
    HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_SCREEN_BUFFER_INFO bufferInfo;
    if (GetConsoleScreenBufferInfo(h, &bufferInfo) == 0){
        return 0;
    }
    *x = bufferInfo.dwCursorPosition.X;
    *y = bufferInfo.dwCursorPosition.Y;
#else
    printf("\033[6n");
    scanf("\033[%d;%dR", x, y);
#endif
    return 1;
}

int internal_terminal_clear_screen(){
#ifdef _WIN32
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    COORD coordScreen = {0, 0};
    DWORD cCharsWritten;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    DWORD dwConSize;
    GetConsoleScreenBufferInfo(hConsole, &csbi);
    dwConSize = csbi.dwSize.X * csbi.dwSize.Y;
    FillConsoleOutputCharacter(hConsole, (TCHAR)' ',
       dwConSize, coordScreen, &cCharsWritten);
    GetConsoleScreenBufferInfo(hConsole, &csbi);
    FillConsoleOutputAttribute(hConsole, csbi.wAttributes,
       dwConSize, coordScreen, &cCharsWritten);
    SetConsoleCursorPosition(hConsole, coordScreen);
#else
    write(1,"\E[H\E[2J",7);
#endif
}

#ifdef _WIN32
#else
static struct termios current_terminal_mode;
static int terminalConfigInited = 0;
#endif

void private_terminal_full_state(){
    #ifdef _WIN32
    #else
    if (!terminalConfigInited){
        tcgetattr(0, &current_terminal_mode);
        terminalConfigInited = 1;
    }
    #endif
}

void internal_terminal_set_io_buffer(int value){
    private_terminal_full_state();
    #ifdef _WIN32
    #else
    if (value) {
        current_terminal_mode.c_lflag |= ICANON;
    } else {
        current_terminal_mode.c_lflag &= ~ICANON;
    }
    tcsetattr(0, TCSANOW, &current_terminal_mode);
    #endif
}

int internal_terminal_get_io_buffer(){
    #ifdef _WIN32
    #else
    private_terminal_full_state();
    return current_terminal_mode.c_lflag & ICANON;
    #endif
}

void internal_terminal_set_echo(int value){
    private_terminal_full_state();
    #ifdef _WIN32
    #else
    if (value) {
        current_terminal_mode.c_lflag |= ECHO;
    } else {
        current_terminal_mode.c_lflag &= ~ECHO;
    }
    tcsetattr(0, TCSANOW, &current_terminal_mode);
    #endif
}

int internal_terminal_get_echo(){
    #ifdef _WIN32
    #else
    private_terminal_full_state();
    return current_terminal_mode.c_lflag & ECHO;
    #endif
}

int internal_get_char(){
#ifdef _WIN32
    return getchar();
#else
    int bufferIsEnabled = internal_terminal_get_io_buffer();
    if (bufferIsEnabled){
        internal_terminal_set_io_buffer(0);
    }
    int result = (int)getc(stdin);

    if (bufferIsEnabled){
        internal_terminal_set_io_buffer(1);
    }
    return result;
#endif
}

int internal_is_console(){
#ifdef _WIN32
    HWND consoleWnd = GetConsoleWindow();
    DWORD dwProcessId;
    GetWindowThreadProcessId(consoleWnd, &dwProcessId);
    return GetCurrentProcessId() == dwProcessId;
#else
    return isatty(STDOUT_FILENO);
#endif
}
