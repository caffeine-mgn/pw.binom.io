apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: pw.binom.plugins.BinomPublishPlugin

import org.jetbrains.kotlin.konan.target.KonanTarget
import pw.binom.plugins.BuildStaticTask

def getLinkArgs(target) {
    return [
            '-include-binary', file("${buildDir}/native/${target.konanTarget.name}/libsqlite3.a").absolutePath
    ]
}

def sqlitePackageName = 'platform.internal_sqlite'

kotlin {

    linuxX64 {
        def task = it
        task.konanTarget.name
        binaries {
            staticLib()

            compilations.main {
                kotlinOptions.freeCompilerArgs = getLinkArgs(task)
                cinterops {
                    sqlite {
                        defFile project.file("src/nativeInterop/nativeSqlite3.def")
                        packageName sqlitePackageName
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/native"
                    }
                }
            }
            compilations.test.kotlinOptions.freeCompilerArgs = getLinkArgs(task)
        }
    }

    linuxArm32Hfp {
        def task = it
        binaries {
            staticLib()

            compilations.main {
                kotlinOptions.freeCompilerArgs = getLinkArgs(task)
                cinterops {
                    sqlite {
                        defFile project.file("src/nativeInterop/nativeSqlite3.def")
                        packageName sqlitePackageName
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/native"
                    }
                }
            }
            compilations.test.kotlinOptions.freeCompilerArgs = getLinkArgs(task)
        }
    }

    macosX64 {
        def task = it
        binaries {
            staticLib()

            compilations.main {
                kotlinOptions.freeCompilerArgs = getLinkArgs(task)
                cinterops {
                    sqlite {
                        defFile project.file("src/nativeInterop/nativeSqlite3.def")
                        packageName sqlitePackageName
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/native"
                    }
                }
            }
            compilations.test.kotlinOptions.freeCompilerArgs = getLinkArgs(task)
        }
    }


    mingwX64 {
        def task = it
        binaries {
            staticLib()

            compilations.main {
                kotlinOptions.freeCompilerArgs = getLinkArgs(task)
                cinterops {
                    sqlite {
                        defFile project.file("src/nativeInterop/nativeSqlite3.def")
                        packageName sqlitePackageName
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/native"
                    }
                }
            }
            compilations.test.kotlinOptions.freeCompilerArgs = getLinkArgs(task)
        }
    }

//    mingwX86 {
//        def task = it
//        binaries {
//            staticLib()
//
//            compilations.main {
//                kotlinOptions.freeCompilerArgs = getLinkArgs(task)
//                cinterops {
//                    sqlite {
//                        defFile project.file("src/nativeInterop/nativeSqlite3.def")
//                        packageName sqlitePackageName
//                        includeDirs.headerFilterOnly "${buildFile.parent}/src/native"
//                    }
//                }
//            }
//            compilations.test.kotlinOptions.freeCompilerArgs = getLinkArgs(task)
//        }
//    }

    jvm {
        compilations.all {
            kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

    sourceSets {

        commonMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                api project(":db")
                api project(":core")
                api project(":file")
            }
        }

        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        nativeMain {
            dependencies {
                dependsOn commonMain
            }
        }

        linuxX64Main {
            dependencies {
                dependsOn nativeMain
            }
        }

        linuxArm32HfpMain {
            dependencies {
                dependsOn linuxX64Main
            }
        }

        macosX64Main {
            dependencies {
                dependsOn linuxX64Main
            }
        }

        mingwX64Main {
            dependencies {
                dependsOn linuxX64Main
            }
        }

//        mingwX86Main {
//            dependencies {
//                dependsOn linuxX64Main
//            }
//        }

        jvmMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                api 'org.xerial:sqlite-jdbc:3.31.1'

            }
        }

        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
            }
        }

        sourceSets.all {
            languageSettings {
                progressiveMode = true
            }
        }
    }
}

def defineBuild(KonanTarget selectTarget) {
    BuildStaticTask task = tasks.create("buildSqlite${selectTarget.name.capitalize()}", BuildStaticTask.class)
    task.target = selectTarget
    task.include(file("${buildFile.parentFile}/src/native"))
    task.compileArgs(
            "-DSQLITE_ENABLE_FTS3",
            "-DSQLITE_ENABLE_FTS4",
            "-DSQLITE_ENABLE_FTS5",
            "-DSQLITE_ENABLE_RTREE",
            "-DSQLITE_ENABLE_DBSTAT_VTAB",
            "-DSQLITE_ENABLE_JSON1",
            "-DSQLITE_ENABLE_RBU",
            "-DSQLITE_THREADSAFE=1",
            "-DSQLITE_ENABLE_EXPLAIN_COMMENTS",
            "-DSQLITE_ENABLE_COLUMN_METADATA=1"
    )
    task.compileFile(
            file("${buildFile.parentFile}/src/native/sqlite3.c")
    )
    task.staticFile = file("${buildDir}/native/${selectTarget.name}/libsqlite3.a")
}

//defineBuild(KonanTarget.MINGW_X86.INSTANCE)
defineBuild(KonanTarget.MINGW_X64.INSTANCE)
defineBuild(KonanTarget.LINUX_X64.INSTANCE)
defineBuild(KonanTarget.LINUX_ARM64.INSTANCE)
defineBuild(KonanTarget.LINUX_ARM32_HFP.INSTANCE)
defineBuild(KonanTarget.MACOS_X64.INSTANCE)

compileKotlinLinuxX64 {
    dependsOn buildSqliteLinux_x64
}

compileKotlinMingwX64 {
    dependsOn buildSqliteMingw_x64
}

//compileKotlinMingwX86 {
//    dependsOn buildSqliteMingw_x86
//}

compileKotlinLinuxArm32Hfp {
    dependsOn buildSqliteLinux_arm32_hfp
}

compileKotlinMacosX64 {
    dependsOn buildSqliteMacos_x64
}