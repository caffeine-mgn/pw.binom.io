package pw.binom

import kotlinx.benchmark.*
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.Serializable
import pw.binom.db.async.pool.AsyncConnectionPoolImpl
import pw.binom.db.serialization.*
import pw.binom.db.sqlite.AsyncSQLiteConnector
import pw.binom.io.use

@State(Scope.Benchmark)
@Measurement(iterations = 3, time = 1, timeUnit = BenchmarkTimeUnit.SECONDS)
@OutputTimeUnit(BenchmarkTimeUnit.MILLISECONDS)
@BenchmarkMode(Mode.AverageTime)
class InsertBenchmark {

  @Serializable
  @TableName("users")
  class User(
    @Id
    @AutoGenerated
    val id: Long = 0,
    val name: String,
  )

  @Benchmark
  fun exception() {
    runBlocking {
      AsyncConnectionPoolImpl(1) {
        AsyncSQLiteConnector.memory()
      }.use { pool ->
        DBContext.create(sql = SQLSerialization.DEFAULT, pool = pool).use { db ->
          db.createSchema(User.serializer())
          db.re2 {
            repeat(30000) { _ ->
              it.insert(User.serializer(), User(name = ""))
            }
          }
        }
      }
    }
  }
}
