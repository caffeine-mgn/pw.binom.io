@file:OptIn(ExperimentalSerializationApi::class)

package pw.binom.db.serialization.codes

import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.SerializationStrategy
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.descriptors.StructureKind
import kotlinx.serialization.modules.EmptySerializersModule
import kotlinx.serialization.modules.SerializersModule
import pw.binom.db.serialization.*

class SQLCompositeEncoderImpl(val ctx: SQLEncoderPool, val onClose: () -> Unit) : SQLCompositeEncoder {
  var prefix = ""
  var output: DateContainer = DateContainer.EMPTY
  var useQuotes: Boolean = false
  var excludeGenerated: Boolean = true

  @ExperimentalSerializationApi
  override fun encodeInlineElement(
    descriptor: SerialDescriptor,
    index: Int,
  ): SQLEncoder {
    if (excludeGenerated && descriptor.isAutoGenerated(index)) {
      return SQLEncoder.NULL
    }
    val c =
      ctx.encodeValue(
        name = prefix + descriptor.getElementName(index),
        output = output,
        serializersModule = serializersModule,
        useQuotes = descriptor.isUseQuotes(index) || useQuotes,
        excludeGenerated = excludeGenerated,
      )
    return c
  }

  override var serializersModule: SerializersModule = EmptySerializersModule()

  override fun encodeBooleanElement(
    descriptor: SerialDescriptor,
    index: Int,
    value: Boolean,
  ) {
    if (excludeGenerated && descriptor.isAutoGenerated(index)) {
      return
    }
    output.set(
      key = prefix + descriptor.getElementName(index),
      useQuotes = descriptor.isUseQuotes(index) || useQuotes,
      value = value,
    )
  }

  override fun encodeByteElement(
    descriptor: SerialDescriptor,
    index: Int,
    value: Byte,
  ) {
    if (excludeGenerated && descriptor.isAutoGenerated(index)) {
      return
    }
    output.set(
      key = prefix + descriptor.getElementName(index),
      useQuotes = descriptor.isUseQuotes(index) || useQuotes,
      value = value,
    )
  }

  override fun encodeCharElement(
    descriptor: SerialDescriptor,
    index: Int,
    value: Char,
  ) {
    if (excludeGenerated && descriptor.isAutoGenerated(index)) {
      return
    }
    output.set(
      key = prefix + descriptor.getElementName(index),
      useQuotes = descriptor.isUseQuotes(index) || useQuotes,
      value = value,
    )
  }

  override fun encodeDoubleElement(
    descriptor: SerialDescriptor,
    index: Int,
    value: Double,
  ) {
    if (excludeGenerated && descriptor.isAutoGenerated(index)) {
      return
    }
    output.set(
      key = prefix + descriptor.getElementName(index),
      useQuotes = descriptor.isUseQuotes(index) || useQuotes,
      value = value,
    )
  }

  override fun encodeFloatElement(
    descriptor: SerialDescriptor,
    index: Int,
    value: Float,
  ) {
    if (excludeGenerated && descriptor.isAutoGenerated(index)) {
      return
    }
    output.set(
      key = prefix + descriptor.getElementName(index),
      useQuotes = descriptor.isUseQuotes(index) || useQuotes,
      value = value,
    )
  }

  override fun encodeIntElement(
    descriptor: SerialDescriptor,
    index: Int,
    value: Int,
  ) {
    if (excludeGenerated && descriptor.isAutoGenerated(index)) {
      return
    }
    output.set(
      key = prefix + descriptor.getElementName(index),
      useQuotes = descriptor.isUseQuotes(index) || useQuotes,
      value = value,
    )
  }

  override fun encodeLongElement(
    descriptor: SerialDescriptor,
    index: Int,
    value: Long,
  ) {
    if (excludeGenerated && descriptor.isAutoGenerated(index)) {
      return
    }
    output.set(
      key = prefix + descriptor.getElementName(index),
      useQuotes = descriptor.isUseQuotes(index) || useQuotes,
      value = value,
    )
  }

  @OptIn(ExperimentalSerializationApi::class)
  private fun encodeNull(prefix: String, descriptor: SerialDescriptor, index: Int) {
    if (descriptor.kind != StructureKind.CLASS) {
      TODO()
    }
    val field = descriptor.getElementDescriptor(index)
    val splitter = descriptor.getElementAnnotation<EmbeddedSplitter>(index)?.splitter ?: ""
    if (field.kind == StructureKind.CLASS) {
      (0 until field.elementsCount).forEach { fieldIndex ->
        val elementDescriptor = field.getElementDescriptor(fieldIndex)
        val elementName = field.getElementName(fieldIndex)
        if (elementDescriptor.kind is PrimitiveKind) {
          val key = prefix + descriptor.getElementName(index) + splitter + elementName
          output.set(
            key = key,
            value = null,
            useQuotes = descriptor.isUseQuotes(index) || useQuotes,
          )
        } else {
          encodeNull(
            prefix = prefix + descriptor.getElementName(index) + splitter,
            descriptor = elementDescriptor,
            index = fieldIndex,
          )
        }
      }
    } else {
      val elementName = descriptor.getElementName(index)
      output.set(
        key = prefix + splitter + elementName,
        value = null,
        useQuotes = descriptor.isUseQuotes(index) || useQuotes,
      )
    }
//    output.set(
//      key = prefix + descriptor.getElementName(index),
//      value = null,
//      useQuotes = descriptor.isUseQuotes(index) || useQuotes,
//    )
  }

  @ExperimentalSerializationApi
  override fun <T : Any> encodeNullableSerializableElement(
    descriptor: SerialDescriptor,
    index: Int,
    serializer: SerializationStrategy<T>,
    value: T?,
  ) {
    if (excludeGenerated && descriptor.isAutoGenerated(index)) {
      return
    }
    if (value == null) {
      encodeNull(
        descriptor = descriptor,
        index = index,
        prefix = prefix,
      )
//      output.set(
//        key = prefix + descriptor.getElementName(index),
//        value = null,
//        useQuotes = descriptor.isUseQuotes(index) || useQuotes,
//      )
    } else {
      encodeSerializableElement(
        descriptor = descriptor,
        index = index,
        serializer = serializer,
        value = value,
      )
    }
  }

  override fun <T> encodeSerializableElement(
    descriptor: SerialDescriptor,
    index: Int,
    serializer: SerializationStrategy<T>,
    value: T,
  ) {
    if (excludeGenerated && descriptor.isAutoGenerated(index)) {
      return
    }
    val splitter = descriptor.getElementAnnotation<EmbeddedSplitter>(index)?.splitter ?: ""
    val encoder =
      ctx.encodeValue(
        name = prefix + descriptor.getElementName(index) + splitter,
        output = output,
        excludeGenerated = excludeGenerated,
        serializersModule = serializersModule,
        useQuotes = descriptor.isUseQuotes(index) || useQuotes,
      )
    serializer.serialize(
      encoder = encoder,
      value = value,
    )
  }

  override fun encodeShortElement(
    descriptor: SerialDescriptor,
    index: Int,
    value: Short,
  ) {
    if (excludeGenerated && descriptor.isAutoGenerated(index)) {
      return
    }
    output.set(
      key = prefix + descriptor.getElementName(index),
      useQuotes = descriptor.isUseQuotes(index) || useQuotes,
      value = value,
    )
  }

  override fun encodeStringElement(
    descriptor: SerialDescriptor,
    index: Int,
    value: String,
  ) {
    if (excludeGenerated && descriptor.isAutoGenerated(index)) {
      return
    }
    output.set(
      key = prefix + descriptor.getElementName(index),
      useQuotes = descriptor.isUseQuotes(index) || useQuotes,
      value = value,
    )
  }

  override fun endStructure(descriptor: SerialDescriptor) {
    onClose()
  }
}
