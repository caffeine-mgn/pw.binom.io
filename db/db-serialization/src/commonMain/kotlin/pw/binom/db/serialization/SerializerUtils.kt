@file:OptIn(ExperimentalSerializationApi::class)

package pw.binom.db.serialization

import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.KSerializer
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.modules.SerializersModule
import pw.binom.db.async.AsyncResultSet
import kotlin.jvm.JvmName

@get:JvmName("getIdColumn2")
@OptIn(ExperimentalSerializationApi::class)
val KSerializer<out Any>.idColumn: String?
    get() {
        for (i in 0 until descriptor.elementsCount) {
            descriptor.getElementAnnotations(i).forEach {
                if (it is Id) {
                    return descriptor.getElementName(i)
                }
            }
        }
        return null
    }

suspend fun <T> AsyncResultSet.decodeFlow(
    serializer: KSerializer<T>,
    serializersModule: SerializersModule = SQLSerialization.DEFAULT.serializersModule
): Flow<T> {
    val r = ResultSetDataProvider(this)
    return flow {
        try {
            while (this@decodeFlow.next()) {
                val obj = DefaultSQLSerializePool.decode(
                    serializer = serializer,
                    name = "",
                    input = r,
                    serializersModule = serializersModule,
                )
                emit(obj)
            }
        } finally {
            this@decodeFlow.asyncClose()
        }
    }
}

fun KSerializer<out Any>.getIdColumn() =
    idColumn ?: throw IllegalArgumentException("Can't find Id Column in ${descriptor.serialName}")

inline fun <reified T : Any> SerialDescriptor.getElementAnnotation() =
    annotations.find { it is T }?.let { it as T }

inline fun <reified T : Any> SerialDescriptor.getElementAnnotation(index: Int) =
    getElementAnnotations(index).find { it is T }?.let { it as T }

fun SerialDescriptor.isAutoGenerated(index: Int) =
    getElementAnnotation<AutoGenerated>(index) != null

fun SerialDescriptor.isUseQuotes(index: Int) =
    getElementAnnotation<UseQuotes>(index) != null

fun SerialDescriptor.isUseQuotes() =
    annotations.any { it is UseQuotes }

fun SerialDescriptor.getTableName() =
    getElementAnnotation<TableName>()?.tableName
