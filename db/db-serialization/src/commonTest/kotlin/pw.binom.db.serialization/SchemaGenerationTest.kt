package pw.binom.db.serialization

import kotlinx.coroutines.test.runTest
import kotlinx.serialization.Contextual
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import pw.binom.UUID
import pw.binom.date.Calendar
import pw.binom.date.Date
import pw.binom.db.async.pool.AsyncConnectionPool
import pw.binom.db.sqlite.AsyncSQLiteConnector
import pw.binom.io.use
import kotlin.test.Test

class SchemaGenerationTest {

    @Serializable
    @UseQuotes
    @TableName("my_entity")
    data class MyEntity(
        @Id
        @AutoGenerated
        val id: Long,

        @Contextual
        @UseQuotes
        @SqliteColumnType("blob")
        val uuid: UUID,

        @SqliteColumnType("integer")
        @Contextual
        val created: Date,

        @Contextual
        @SqliteColumnType("integer")
        val updated: Calendar,

        @UseQuotes
        @SerialName("class")
        val clazz: Char,

        @SerialName("finished")
        val isFinished: Boolean
    )

    @Test
    fun test() {
        val tableSchema = runTest {
            AsyncConnectionPool.create(maxConnections = 1) {
                AsyncSQLiteConnector.memory()
            }
                .let { DBContext.create(it) }
                .use {
                    val engine = it.re {
                        it.dbDatabaseInfo.engine
                    }

                    it.generateSchema(
                        engine = engine,
                        serializer = MyEntity.serializer(),
                    )
                }

        }
        println(tableSchema)
    }
}