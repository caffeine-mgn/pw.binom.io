package pw.binom.db.serialization

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.test.runTest
import kotlinx.coroutines.withContext
import kotlinx.serialization.Contextual
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import pw.binom.date.Calendar
import pw.binom.date.DateTime
import pw.binom.db.async.pool.AsyncConnectionPool
import pw.binom.db.sqlite.AsyncSQLiteConnector
import pw.binom.io.useAsync
import pw.binom.network.Network
import pw.binom.uuid.UUID
import kotlin.test.Test

class SchemaGenerationTest {
  @Serializable
  @UseQuotes
  @TableName("my_entity")
  @Indexes(Index(columns = ["uuid"]), Index(columns = ["created"]))
  data class MyEntity(
    @Id
    @AutoGenerated
    val id: Long,
    @Contextual
    @UseQuotes
    @SqliteColumnType("blob")
    val uuid: UUID,
    @SqliteColumnType("integer")
    @Contextual
    val created: DateTime,
    @Contextual
    @SqliteColumnType("integer")
    val updated: Calendar,
    @UseQuotes
    @SerialName("class")
    val clazz: Char,
    @SerialName("finished")
    val isFinished: Boolean,
  )

  @Test
  fun test() {
    val tableSchema =
      runTest {
        val e =
          withContext(Dispatchers.Network) {
            AsyncConnectionPool.create(maxConnections = 1) {
              AsyncSQLiteConnector.memory()
            }.let { DBContext.create(it) }.useAsync {
              val engine =
                it.re {
                  it.dbDatabaseInfo.engine
                }

              it.generateSchema(
                engine = engine,
                serializer = MyEntity.serializer(),
              )
            }
          }
        e.forEach {
          println(it)
        }
      }
  }
}
