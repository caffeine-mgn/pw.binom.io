package pw.binom.db.serialization

import kotlinx.coroutines.test.runTest
import kotlinx.serialization.Serializable
import pw.binom.concurrency.sleep
import pw.binom.db.async.pool.AsyncConnectionPool
import pw.binom.db.postgresql.async.PGConnection
import pw.binom.db.sqlite.AsyncSQLiteConnector
import pw.binom.io.use
import pw.binom.network.NetworkAddress
import pw.binom.nextUuid
import kotlin.random.Random
import kotlin.test.Test
import kotlin.test.assertEquals

class InsertTest {

    fun db(sql: SQLSerialization = SQLSerialization.DEFAULT, func: suspend (DBContext) -> Unit) = runTest {
        try {
            sleep(1000)
            AsyncConnectionPool.create(maxConnections = 1) {
                PGConnection.connect(
                    address = NetworkAddress.Immutable(host = "127.0.0.1", port = 6102),
                    userName = "postgres",
                    password = "postgres",
                    dataBase = "test",
                )
            }.use { pool ->
                val context = DBContext.create(pool, sql)
                func(context)
            }
        } catch (e: Throwable) {
            throw RuntimeException("Exception on PostgreSQL", e)
        }
        try {
            AsyncConnectionPool.create(maxConnections = 1) {
                AsyncSQLiteConnector.memory(Random.nextUuid().toString())
            }.use { pool ->
                val context = DBContext.create(pool, sql)
                func(context)
            }
        } catch (e: Throwable) {
            throw RuntimeException("Exception on SQLite", e)
        }
    }

    @TableName("my_table")
    @Serializable
    class Entity(
        @Id
        @AutoGenerated
        val id: Long = 0,

        @ColumnType("varchar(60)")
        val title: String,
    )

    @Test
    fun getInsertedValueTest() {
        db { context ->
            var insertedId = 0L
            context.createSchema<Entity>()
            context.re {
                it.insertEntity(Entity(title = "ololo")) {
                    insertedId = it["id"]!!.toLong()
                }
            }
            assertEquals(1L, insertedId)
        }
    }
}
