---

#ifndef NATIVE_DEFINITION_H
#define NATIVE_DEFINITION_H
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)
#define WINDOWS_TARGET
//define something for Windows (32-bit and 64-bit, this part is common)
   #ifdef _WIN64
      //define something for Windows (64-bit only)
   #else
      //define something for Windows (32-bit only)
   #endif
#elif __APPLE__
#define APPLE_TARGET
#include <TargetConditionals.h>
    #if TARGET_IPHONE_SIMULATOR
         // iOS, tvOS, or watchOS Simulator
    #elif TARGET_OS_MACCATALYST
         // Mac's Catalyst (ports iOS API into Mac, like UIKit).
    #elif TARGET_OS_IPHONE
        // iOS, tvOS, or watchOS device
    #elif TARGET_OS_MAC
        // Other kinds of Apple platforms
    #else
    #   error "Unknown Apple platform"
    #endif
#elif __ANDROID__
#define ANDROID_TARGET
#define LINUX_LIKE_TARGET
// Below __linux__ check should be enough to handle Android,
    // but something may be unique to Android.
#elif __linux__
#define LINUX_LIKE_TARGET
#define LINUX_TARGET
// linux
#elif __unix__ // all unices not caught above
#define LINUX_LIKE_TARGET
#define POSIX_TARGET
// Unix
#elif defined(_POSIX_VERSION)
    // POSIX
#else
#   error "Unknown compiler"
#endif


#endif //NATIVE_DEFINITION_H

#ifdef LINUX_LIKE_TARGET
#include <sys/statvfs.h>
#include <sys/stat.h>
#endif

#ifndef NULL
#define NULL (void*)0
#endif

#include <stdint.h>

int64_t internal_get_free_space(const char* path){
#ifdef LINUX_LIKE_TARGET
    struct statvfs stat;
    if (statvfs(path, &stat) != 0){
        return 0;
    }
    return stat.f_bfree * stat.f_bsize;
#endif
#ifdef WINDOWS_TARGET
    long int freeSpace = 0;
    if (GetDiskFreeSpaceEx(path, NULL, NULL, &freeSpace) == 0){
        return 0;
    }
    return freeSpace;
#endif
}

int64_t internal_get_available_space(const char* path){
#ifdef LINUX_LIKE_TARGET
    struct statvfs stat;
    if (statvfs(path, &stat) != 0){
        return 0;
    }
    return stat.f_bavail * stat.f_bsize;
#endif
#ifdef WINDOWS_TARGET
    long int availableSpace = 0;
    if (GetDiskFreeSpaceEx(path, &availableSpace, NULL, NULL) == 0){
        return 0;
    }
    return availableSpace;
#endif
}

int64_t internal_get_total_space(const char* path){
#ifdef LINUX_LIKE_TARGET
    struct statvfs stat;
    if (statvfs(path, &stat) != 0){
        return 0;
    }
    return stat.f_blocks * stat.f_frsize;
#endif
#ifdef WINDOWS_TARGET
    long int availableSpace = 0;
    if (GetDiskFreeSpaceEx(path, NULL, &availableSpace, NULL) == 0){
        return 0;
    }
    return availableSpace;
#endif
}

int internal_is_file(const char* path){
#ifdef LINUX_LIKE_TARGET
//    struct statvfs pathInfo;
//    if (statvfs(path, &pathInfo) != 0){
//        return 0;
//    }
//    return S_IFDIR != pathInfo.st_mode & S_IFMT
#endif
}
