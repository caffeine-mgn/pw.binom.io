apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.kotlin.multiplatform'

def argsGenLinux(String path) {
    return [
            '-include-binary', buildFile.parent + "/src/$path/cinterop/lib/libsqlite3.a"
    ]
}

String pathToHeaders() {
    return "${project(":native:native_sqlite").buildFile.parentFile}/src/main/h".toString()
}

def sqlitePackageName = 'platform.internal_sqlite'

kotlin {

    linuxX64 { // Use your target instead.
        binaries {
            staticLib()

            compilations.main {
                cinterops {
                    sqlite {
                        defFile project.file("src/nativeInterop/nativeSqlite3.def")
                        packageName sqlitePackageName
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/nativeInterop/include"
                    }
                }
            }
            compilations.test.kotlinOptions.freeCompilerArgs = argsGenLinux("linuxX64Main")
        }
    }

    linuxArm32Hfp {
        binaries {
            staticLib()

            compilations.main {
                cinterops {
                    sqlite {
                        defFile project.file("src/nativeInterop/nativeSqlite3.def")
                        packageName sqlitePackageName
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/nativeInterop/include"
                    }
                }
            }
            compilations.test.kotlinOptions.freeCompilerArgs = argsGenLinux("linuxArm32HfpMain")
        }
    }


    mingwX64 { // Use your target instead.
        binaries {
            staticLib()

            compilations.main {
                cinterops {
                    sqlite {
                        defFile project.file("src/nativeInterop/nativeSqlite3.def")
                        packageName sqlitePackageName
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/nativeInterop/include"
                    }
                }
            }
            compilations.test.kotlinOptions.freeCompilerArgs = argsGenLinux("mingwX64Main")
        }
    }

    mingwX86 { // Use your target instead.
        binaries {
            staticLib()

            compilations.main {
                cinterops {
                    sqlite {
                        defFile project.file("src/nativeInterop/nativeSqlite3.def")
                        packageName sqlitePackageName
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/nativeInterop/include"
                    }
                }
            }
            compilations.test.kotlinOptions.freeCompilerArgs = argsGenLinux("mingwX86Main")
        }
    }

    jvm {
        compilations.all {
            kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

    sourceSets {

        commonMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                api project(":db")
                api project(":file")
            }
        }

        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        nativeMain {
            dependencies {
                dependsOn commonMain
            }
        }

        linuxX64Main {
            dependencies {
                dependsOn nativeMain
            }
        }

        linuxArm32HfpMain {
            dependencies {
                dependsOn linuxX64Main
            }
        }

        mingwX64Main {
            dependencies {
                dependsOn linuxX64Main
            }
        }

        mingwX86Main {
            dependencies {
                dependsOn linuxX64Main
            }
        }

        jvmMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                api 'org.xerial:sqlite-jdbc:3.31.1'

            }
        }

        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
            }
        }

        sourceSets.all {
            languageSettings {
                progressiveMode = true
            }
        }
    }
}

//linkDebugStaticMingwX64 {
//    dependsOn ":native:native:native_sqlite"
//}

apply from: '../public.gradle'