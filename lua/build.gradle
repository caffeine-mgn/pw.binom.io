apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.kotlin.multiplatform'


import org.jetbrains.kotlin.konan.target.KonanTarget
import pw.binom.plugins.BuildStaticTask

def ideaActive = System.getProperty('idea.active') == 'true' && gradle.startParameter.taskNames.isEmpty()

def getLinkArgs(target) {
    return [
            '-include-binary', file("${buildDir}/native/${target.konanTarget.name}/liblua.a").absolutePath
    ]
}

def luaPackageName = 'platform.internal_lua'

kotlin {

    if (ideaActive) {
        linuxX64("native")
    }

    linuxX64 {
        def task = it
        task.konanTarget.name
        binaries {
            staticLib()

            compilations.main {
                kotlinOptions.freeCompilerArgs = getLinkArgs(task)
                cinterops {
                    lua {
                        defFile project.file("src/nativeInterop/lua.def")
                        packageName luaPackageName
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/nativeMain/lua"
                    }
                }
            }
            compilations.test.kotlinOptions.freeCompilerArgs = getLinkArgs(task)
        }
    }

    macosX64 {
        def task = it
        binaries {
            staticLib()

            compilations.main {
                kotlinOptions.freeCompilerArgs = getLinkArgs(task)
                cinterops {
                    lua {
                        defFile project.file("src/nativeInterop/lua.def")
                        packageName luaPackageName
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/nativeMain/lua"
                    }
                }
            }
            compilations.test.kotlinOptions.freeCompilerArgs = getLinkArgs(task)
        }
    }

    linuxArm32Hfp {
        def task = it
        binaries {
            staticLib()

            compilations.main {
                kotlinOptions.freeCompilerArgs = getLinkArgs(task)
                cinterops {
                    lua {
                        defFile project.file("src/nativeInterop/lua.def")
                        packageName luaPackageName
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/nativeMain/lua"
                    }
                }
            }
            compilations.test.kotlinOptions.freeCompilerArgs = getLinkArgs(task)
        }
    }


    mingwX64 {
        def task = it
        binaries {
            staticLib()

            compilations.main {
                kotlinOptions.freeCompilerArgs = getLinkArgs(task)
                cinterops {
                    lua {
                        defFile project.file("src/nativeInterop/lua.def")
                        packageName luaPackageName
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/nativeMain/lua"
                    }
                }
            }
            compilations.test.kotlinOptions.freeCompilerArgs = getLinkArgs(task)
        }
    }

    mingwX86 {
        def task = it
        binaries {
            staticLib()

            compilations.main {
                kotlinOptions.freeCompilerArgs = getLinkArgs(task)
                cinterops {
                    lua {
                        defFile project.file("src/nativeInterop/lua.def")
                        packageName luaPackageName
                        includeDirs.headerFilterOnly "${buildFile.parent}/src/nativeMain/lua"
                    }
                }
            }
            compilations.test.kotlinOptions.freeCompilerArgs = getLinkArgs(task)
        }
    }

    sourceSets {

        commonMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                api project(":core")
            }
        }

        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        nativeMain {
            dependencies {
                dependsOn commonMain
            }
        }

        linuxX64Main {
            dependencies {
                dependsOn nativeMain
                api project(":core")
            }
        }

        linuxArm32HfpMain {
            dependencies {
                dependsOn linuxX64Main
            }
        }

        macosX64Main {
            dependencies {
                dependsOn linuxX64Main
            }
        }

        mingwX64Main {
            dependencies {
                dependsOn linuxX64Main
            }
        }

        mingwX86Main {
            dependencies {
                dependsOn linuxX64Main
            }
        }

        jvmMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                api 'org.luaj:luaj-jse:3.0.1'
            }
        }

        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
            }
        }

        sourceSets.all {
            languageSettings {
                progressiveMode = true
            }
        }
    }
}

def defineBuild(KonanTarget selectTarget) {
    BuildStaticTask task = tasks.create("buildLua${selectTarget.name.capitalize()}", BuildStaticTask.class)
    task.target = selectTarget
    task.compileArgs("-std=gnu99", "-DLUA_COMPAT_5_3")
//    task.include(file("${buildFile.parentFile}/src/native"))
    task.compileArgs(
            "-DSQLITE_ENABLE_FTS3",
            "-DSQLITE_ENABLE_FTS4",
            "-DSQLITE_ENABLE_FTS5",
            "-DSQLITE_ENABLE_RTREE",
            "-DSQLITE_ENABLE_DBSTAT_VTAB",
            "-DSQLITE_ENABLE_JSON1",
            "-DSQLITE_ENABLE_RBU",
            "-DSQLITE_THREADSAFE=1",
            "-DSQLITE_ENABLE_EXPLAIN_COMMENTS",
            "-DSQLITE_ENABLE_COLUMN_METADATA=1"
    )
    task.compileDir(
            file("${buildFile.parentFile}/src/nativeMain/lua"),
            file("${buildDir}/native/o/${selectTarget.name}"),
            null,
            null
    )
    task.staticFile = file("${buildDir}/native/${selectTarget.name}/liblua.a")
}

defineBuild(KonanTarget.MINGW_X86.INSTANCE)
defineBuild(KonanTarget.MINGW_X64.INSTANCE)
defineBuild(KonanTarget.LINUX_X64.INSTANCE)
defineBuild(KonanTarget.LINUX_ARM64.INSTANCE)
defineBuild(KonanTarget.LINUX_ARM32_HFP.INSTANCE)

compileKotlinLinuxX64 {
    dependsOn buildLuaLinux_x64
}

compileKotlinMingwX64 {
    dependsOn buildLuaMingw_x64
}

compileKotlinMingwX86 {
    dependsOn buildLuaMingw_x86
}

compileKotlinLinuxArm32Hfp {
    dependsOn buildLuaLinux_arm32_hfp
}

apply from: '../public.gradle'