package pw.binom.wasm

object Opcodes {
  const val UNREACHABLE: UByte = 0x00u // unreachable
  const val NOP: UByte = 0x01u // nop
  const val BLOCK: UByte = 0x02u // block
  const val LOOP: UByte = 0x03u // loop
  const val IF: UByte = 0x04u // if
  const val ELSE: UByte = 0x05u // else
  const val TRY: UByte = 0x06u // try
  const val CATCH: UByte = 0x07u // catch
  const val THROW: UByte = 0x08u // throw
  const val RETHROW: UByte = 0x09u // rethrow
  const val TRY_TABLE: UByte = 0x1fu // try_table
  const val THROW_REF: UByte = 0x0au // throw_ref
  const val END: UByte = 0xbu // end
  const val BR: UByte = 0xcu // br
  const val BR_IF: UByte = 0xdu // br_if
  const val BR_TABLE: UByte = 0xeu // br_table
  const val RETURN: UByte = 0xfu // return
  const val DELEGATE: UByte = 0x18u // delegate
  const val CATCH_ALL: UByte = 0x19u // catch_all
  const val BR_ON_NULL: UByte = 0xd5u // br_on_null
  const val BR_ON_NON_NULL: UByte = 0xd6u // br_on_non_null
  //V(NopForTestingUnsupportedInLiftoff, 0x16, _, "nop_for_testing")

  const val CALL: UByte = 0x10u // call
  const val CALL_INDIRECT: UByte = 0x11u // call_indirect
  const val CALL_REF: UByte = 0x14u // call_ref
  const val RETURN_CALL_REF: UByte = 0x15u // return_call_ref
  const val DROP: UByte = 0x1au // drop
  const val SELECT: UByte = 0x1bu // select
  const val SELECT_WITH_TYPE: UByte = 0x1cu // select with type

  const val GET_LOCAL: UByte = 0x20u // local.get
  const val SET_LOCAL: UByte = 0x21u // local.set
  const val TEE_LOCAL: UByte = 0x22u // local.tee
  const val GET_GLOBAL: UByte = 0x23u // global.get
  const val SET_GLOBAL: UByte = 0x24u // global.set

  const val I32_LOAD: UByte = 0x28u // i32.load
  const val I64_LOAD: UByte = 0x29u // i64.load
  const val F32_LOAD: UByte = 0x2au // f32.load
  const val F64_LOAD: UByte = 0x2bu // f64.load
  const val I32_LOAD8_S: UByte = 0x2cu // i32.load8_s
  const val I32_LOAD8_U: UByte = 0x2du // i32.load8_u
  const val I32_LOAD16_S: UByte = 0x2eu // i32.load16_s
  const val I32_LOAD16_U: UByte = 0x2fu // i32.load16_u
  const val I64_LOAD8_S: UByte = 0x30u // i64.load8_s
  const val I64_LOAD8_U: UByte = 0x31u // i64.load8_u
  const val I64_LOAD16_S: UByte = 0x32u // i64.load16_s
  const val I64_LOAD16_U: UByte = 0x33u // i64.load16_u
  const val I64_LOAD32_S: UByte = 0x34u // i64.load32_s
  const val I64_LOAD32_U: UByte = 0x35u // i64.load32_u
  const val I32_STORE: UByte = 0x36u // i32.store
  const val I64_STORE: UByte = 0x37u // i64.store
  const val F32_STORE: UByte = 0x38u // f32.store
  const val F64_STORE: UByte = 0x39u // f64.store
  const val I32_STORE8: UByte = 0x3au // i32.store8
  const val I32_STORE16: UByte = 0x3bu // i32.store16
  const val I64_STORE8: UByte = 0x3cu // i64.store8
  const val I64_STORE16: UByte = 0x3du // i64.store16
  const val I64_STORE32: UByte = 0x3eu // i64.store32
  const val MEMORY_SIZE: UByte = 0x3fu // memory.size
  const val MEMORY_GROW: UByte = 0x40u // memory.grow

  const val I32_CONST: UByte = 0x41u // i32.const
  const val I64_CONST: UByte = 0x42u // i64.const
  const val F32_CONST: UByte = 0x43u // f32.const
  const val F64_CONST: UByte = 0x44u // f64.const

  const val I32_EQZ: UByte = 0x45u//opMapEntry("i32.eqz", 0x45, CompareOp::NoArg, Instr.I32Eqz, Instr.I32Eqz::class)
  const val I32_EQ: UByte = 0x46u // i32.eq
  const val I32_NE: UByte = 0x47u//opMapEntry("i32.ne", 0x47, CompareOp::NoArg, Instr.I32Ne, Instr.I32Ne::class)
  const val I32_LT_S: UByte = 0x48u // i32.lt_s
  const val I32_LT_U: UByte = 0x49u // i32.lt_u
  const val I32_GT_S: UByte = 0x4au // i32.gt_s
  const val I32_GT_U: UByte = 0x4bu // i32.gt_u
  const val I32_LE_S: UByte = 0x4cu // i32.le_s
  const val I32_LE_U: UByte = 0x4du // i32.le_u
  const val I32_GE_S: UByte = 0x4eu // i32.ge_s
  const val I32_GE_U: UByte = 0x4fu // i32.ge_u
  const val I64_EQZ: UByte = 0x50u//opMapEntry("i64.eqz", 0x50, CompareOp::NoArg, Instr.I64Eqz, Instr.I64Eqz::class)
  const val I64_EQ: UByte = 0x51u // i64.eq
  const val I64_NE: UByte = 0x52u // i64.ne
  const val I64_LT_S: UByte = 0x53u // i64.lt_s
  const val I64_LT_U: UByte = 0x54u//opMapEntry("i64.lt_u", 0x54, CompareOp::NoArg, Instr.I64LtU, Instr.I64LtU::class)
  const val I64_GT_S: UByte = 0x55u // i64.gt_s
  const val I64_GT_U: UByte = 0x56u//opMapEntry("i64.gt_u", 0x56, CompareOp::NoArg, Instr.I64GtU, Instr.I64GtU::class)
  const val I64_LE_S: UByte = 0x57u // i64.le_s
  const val I64_LE_U: UByte = 0x58u // i64.le_u
  const val I64_GE_S: UByte = 0x59u // i64.ge_s
  const val I64_GE_U: UByte = 0x5au // i64.ge_u
  const val F32_EQ: UByte = 0x5bu // f32.eq
  const val F32_NE: UByte = 0x5cu // f32.ne
  const val F32_LT: UByte = 0x5du // f32.lt
  const val F32_GT: UByte = 0x5eu // f32.gt
  const val F32_LE: UByte = 0x5fu // f32.le
  const val F32_GE: UByte = 0x60u // f32.ge
  const val F64_EQ: UByte = 0x61u // f64.eq
  const val F64_NE: UByte = 0x62u // f64.ne
  const val F64_LT: UByte = 0x63u // f64.lt
  const val F64_GT: UByte = 0x64u // f64.gt
  const val F64_LE: UByte = 0x65u // f64.le
  const val F64_GE: UByte = 0x66u // f64.ge

  const val I32_CLZ: UByte = 0x67u // i32.clz
  const val I32_CTZ: UByte = 0x68u // i32.ctz
  const val I32_POPCNT: UByte = 0x69u // i32.popcnt
  const val I32_ADD: UByte = 0x6au // i32.add
  const val I32_SUB: UByte = 0x6bu // i32.sub
  const val I32_MUL: UByte = 0x6cu // i32.mul
  const val I32_DIV_S: UByte = 0x6du // i32.div_s
  const val I32_DIV_U: UByte = 0x6eu // i32.div_u
  const val I32_REM_S: UByte = 0x6fu // i32.rem_s
  const val I32_REM_U: UByte = 0x70u // i32.rem_u
  const val I32_AND: UByte = 0x71u // i32.and
  const val I32_OR: UByte = 0x72u // i32.or
  const val I32_XOR: UByte = 0x73u // i32.xor
  const val I32_SHL: UByte = 0x74u // i32.shl
  const val I32_SHR_S: UByte = 0x75u // i32.shr_s
  const val I32_SHR_U: UByte = 0x76u // i32.shr_u
  const val I32_ROTL: UByte = 0x77u // i32.rotl
  const val I32_ROTR: UByte = 0x78u // i32.rotr
  const val I64_CLZ: UByte = 0x79u // i64.clz
  const val I64_CTZ: UByte = 0x7au // i64.ctz
  const val I64_POPCNT: UByte = 0x7bu // i64.popcnt
  const val I64_ADD: UByte = 0x7cu // i64.add
  const val I64_SUB: UByte = 0x7du//opMapEntry("", 0x7d, NumOp::NoArg, Instr.I64Sub, Instr.I64Sub::class)
  const val I64_MUL: UByte = 0x7eu // i64.mul
  const val I64_DIV_S: UByte = 0x7fu // i64.div_s
  const val I64_DIV_U: UByte = 0x80u // i64.div_u
  const val I64_REM_S: UByte = 0x81u // i64.rem_s
  const val I64_REM_U: UByte = 0x82u // i64.rem_u
  const val I64_AND: UByte = 0x83u // i64.and
  const val I64_OR: UByte = 0x84u // i64.or
  const val I64_XOR: UByte = 0x85u // i64.xor
  const val I64_SHL: UByte = 0x86u // i64.shl
  const val I64_SHR_S: UByte = 0x87u // i64.shr_s
  const val I64_SHR_U: UByte = 0x88u // i64.shr_u
  const val I64_ROTL: UByte = 0x89u//opMapEntry("i64.rotl", 0x89, NumOp::NoArg, Instr.I64Rotl, Instr.I64Rotl::class)
  const val I64_ROTR: UByte = 0x8au//opMapEntry("i64.rotr", 0x8a, NumOp::NoArg, Instr.I64Rotr, Instr.I64Rotr::class)
  const val F32_ABS: UByte = 0x8bu // f32.abs
  const val F32_NEG: UByte = 0x8cu//opMapEntry("f32.neg", 0x8c, NumOp::NoArg, Instr.F32Neg, Instr.F32Neg::class)
  const val F32_CEIL: UByte = 0x8du//opMapEntry("f32.ceil", 0x8d, NumOp::NoArg, Instr.F32Ceil, Instr.F32Ceil::class)
  const val F32_FLOOR: UByte = 0x8eu//opMapEntry("f32.floor", 0x8e, NumOp::NoArg, Instr.F32Floor, Instr.F32Floor::class)
  const val F32_TRUNC: UByte = 0x8fu // f32.trunc
  const val F32_NEAREST: UByte = 0x90u // f32.nearest
  const val F32_SQRT: UByte = 0x91u//opMapEntry("f32.sqrt", 0x91, NumOp::NoArg, Instr.F32Sqrt, Instr.F32Sqrt::class)
  const val F32_ADD: UByte = 0x92u // f32.add
  const val F32_SUB: UByte = 0x93u // f32.sub
  const val F32_MUL: UByte = 0x94u // f32.mul
  const val F32_DIV: UByte = 0x95u // f32.div
  const val F32_MIN: UByte = 0x96u // f32.min
  const val F32_MAX: UByte = 0x97u // f32.max
  const val F32_COPYSIGN: UByte = 0x98u // f32.copysign
  const val F64_ABS: UByte = 0x99u // f64.abs
  const val F64_NEG: UByte = 0x9au // f64.neg
  const val F64_CEIL: UByte = 0x9bu//opMapEntry("f64.ceil", 0x9b, NumOp::NoArg, Instr.F64Ceil, Instr.F64Ceil::class)
  const val F64_FLOOR: UByte = 0x9cu//opMapEntry("f64.floor", 0x9c, NumOp::NoArg, Instr.F64Floor, Instr.F64Floor::class)
  const val F64_TRUNC: UByte = 0x9du // f64.trunc
  const val F64_NEAREST: UByte = 0x9eu // f64.nearest
  const val F64_SQRT: UByte = 0x9fu//opMapEntry("f64.sqrt", 0x9f, NumOp::NoArg, Instr.F64Sqrt, Instr.F64Sqrt::class)
  const val F64_ADD: UByte = 0xa0u // f64.add
  const val F64_SUB: UByte = 0xa1u // f64.sub
  const val F64_MUL: UByte = 0xa2u // f64.mul
  const val F64_DIV: UByte = 0xa3u // f64.div
  const val F64_MIN: UByte = 0xa4u//opMapEntry("f64.min", 0xa4, NumOp::NoArg, Instr.F64Min, Instr.F64Min::class)
  const val F64_MAX: UByte = 0xa5u//opMapEntry("f64.max", 0xa5, NumOp::NoArg, Instr.F64Max, Instr.F64Max::class)
  const val F64_COPYSIGN: UByte = 0xa6u // f64.copysign

  const val I32_WRAP_I64: UByte = 0xa7u // i32.wrap/i64
  const val I32_TRUNC_S_F32: UByte = 0xa8u // i32.trunc_s/f32
  const val I32_TRUNC_U_F32: UByte = 0xa9u // i32.trunc_u/f32
  const val I32_TRUNC_S_F64: UByte = 0xaau // i32.trunc_s/f64
  const val I32_TRUNC_U_F64: UByte = 0xabu // i32.trunc_u/f64
  const val I64_EXTEND_S_I32: UByte = 0xacu // i64.extend_s/i32
  const val I64_EXTEND_U_I32: UByte = 0xadu // i64.extend_u/i32
  const val I64_TRUNC_S_F32: UByte = 0xaeu // i64.trunc_s/f32
  const val I64_TRUNC_U_F32: UByte = 0xafu // i64.trunc_u/f32
  const val I64_TRUNC_S_F64: UByte = 0xb0u // i64.trunc_s/f64
  const val I64_TRUNC_U_F64: UByte = 0xb1u // i64.trunc_u/f64
  const val F32_CONVERT_S_I32: UByte = 0xb2u // f32.convert_s/i32
  const val F32_CONVERT_U_I32: UByte = 0xb3u // f32.convert_u/i32
  const val F32_CONVERT_S_I64: UByte = 0xb4u // f32.convert_s/i64
  const val F32_CONVERT_U_I64: UByte = 0xb5u // f32.convert_u/i64
  const val F32_DEMOTE_F64: UByte = 0xb6u // f32.demote/f64
  const val F64_CONVERT_S_I32: UByte = 0xb7u // f64.convert_s/i32
  const val F64_CONVERT_U_I32: UByte = 0xb8u // f64.convert_u/i32
  const val F64_CONVERT_S_I64: UByte = 0xb9u // f64.convert_s/i64
  const val F64_CONVERT_U_I64: UByte = 0xbau // f64.convert_u/i64
  const val F64_PROMOTE_F32: UByte = 0xbbu // f64.promote/f32

  const val I32_REINTERPRET_F32: UByte = 0xbcu // i32.reinterpret/f32
  const val I64_REINTERPRET_F64: UByte = 0xbdu // i64.reinterpret/f64
  const val F32_REINTERPRET_I32: UByte = 0xbeu // f32.reinterpret/i32
  const val F64_REINTERPRET_I64: UByte = 0xbfu // f64.reinterpret/i64

  const val REF_IS_NULL: UByte = 0xd1u// ref.is_null
  const val REF_NULL: UByte = 0xd0u // ref.null
  const val REF_FUNC: UByte = 0xd2u // ref.func
  const val REF_AS_NON_NULL: UByte = 0xd4u // ref.as_non_null
  const val REF_EQ: UByte = 0xd3u // ref.eq
  const val SIMD_PREFIX: UByte = 0xfdu
  const val NUMERIC_PREFIX: UByte = 0xfcu
  const val NUMERIC_I32S_CONVERT_SAT_F32: UByte = 0x00u // i32.trunc_sat_f32_s
  const val NUMERIC_I32U_CONVERT_SAT_F32: UByte = 0x01u // i32.trunc_sat_f32_u
  const val NUMERIC_I32S_CONVERT_SAT_F64: UByte = 0x02u // i32.trunc_sat_f64_s
  const val NUMERIC_I32U_CONVERT_SAT_F64: UByte = 0x03u // i32.trunc_sat_f64_u
  const val NUMERIC_I64S_CONVERT_SAT_F32: UByte = 0x04u // i64.trunc_sat_f32_s
  const val NUMERIC_I64U_CONVERT_SAT_F32: UByte = 0x05u // i64.trunc_sat_f32_u
  const val NUMERIC_I64S_CONVERT_SAT_F64: UByte = 0x06u // i64.trunc_sat_f64_s
  const val NUMERIC_I64U_CONVERT_SAT_F64: UByte = 0x07u // i64.trunc_sat_f64_u
  const val NUMERIC_DATA_DROP: UByte = 0x09u // data.drop
  const val NUMERIC_TABLE_INIT: UByte = 0x0cu // table.init
  const val NUMERIC_ELEM_DROP: UByte = 0x0du // elem.drop
  const val NUMERIC_TABLE_COPY: UByte = 0x0eu // table.copy
  const val NUMERIC_TABLE_SIZE: UByte = 0x10u // table.size

  //  OpcodeVecI64x2Abs              OpcodeVec = 0xc0
//  OpcodeVecI64x2Neg              OpcodeVec = 0xc1
//  OpcodeVecI64x2AllTrue          OpcodeVec = 0xc3
//  OpcodeVecI64x2BitMask          OpcodeVec = 0xc4
//  OpcodeVecI64x2ExtendLowI32x4S  OpcodeVec = 0xc7
//  OpcodeVecI64x2ExtendHighI32x4S OpcodeVec = 0xc8
//  OpcodeVecI64x2ExtendLowI32x4U  OpcodeVec = 0xc9
//  OpcodeVecI64x2ExtendHighI32x4U OpcodeVec = 0xca
//  OpcodeVecI64x2Shl              OpcodeVec = 0xcb
//  OpcodeVecI64x2ShrS             OpcodeVec = 0xcc
//  OpcodeVecI64x2ShrU             OpcodeVec = 0xcd
//  OpcodeVecI64x2Add              OpcodeVec = 0xce
//  OpcodeVecI64x2Sub              OpcodeVec = 0xd1
//  OpcodeVecI64x2Mul              OpcodeVec = 0xd5
//  OpcodeVecI64x2ExtMulLowI32x4S  OpcodeVec = 0xdc
//  OpcodeVecI64x2ExtMulHighI32x4S OpcodeVec = 0xdd
//  OpcodeVecI64x2ExtMulLowI32x4U  OpcodeVec = 0xde
//  OpcodeVecI64x2ExtMulHighI32x4U OpcodeVec = 0xdf


  const val GC_PREFIX: UByte = 0xfbu
  const val GC_STRUCT_NEW: UByte = 0x00u // struct.new
  const val GC_STRUCT_NEW_DEFAULT: UByte = 0x01u // struct.new_default
  const val GC_STRUCT_GET: UByte = 0x02u // struct.get
  const val GC_STRUCT_GET_S: UByte = 0x03u // struct.get_s
  const val GC_STRUCT_GET_U: UByte = 0x04u // struct.get_u
  const val GC_STRUCT_SET: UByte = 0x05u // struct.set typeid(u32) fieldid(u32)
  const val GC_ARRAY_NEW: UByte = 0x06u // array.new
  const val GC_ARRAY_NEW_DEFAULT: UByte = 0x07u // array.new_default
  const val GC_ARRAY_NEW_FIXED: UByte = 0x08u // array.new_fixed
  const val GC_ARRAY_NEW_DATA: UByte = 0x09u // array.new_data
  const val GC_ARRAY_NEW_ELEM: UByte = 0x0au // array.new_elem
  const val GC_ARRAY_GET: UByte = 0x0bu // array.get
  const val GC_ARRAY_GET_S: UByte = 0x0cu // array.get_s
  const val GC_ARRAY_GET_U: UByte = 0x0du // array.get_u
  const val GC_ARRAY_SET: UByte = 0x0eu // array.set
  const val GC_ARRAY_LEN: UByte = 0x0fu // array.len
  const val GC_ARRAY_FILL: UByte = 0x10u // array.fill
  const val GC_ARRAY_COPY: UByte = 0x11u // array.copy
  const val GC_ARRAY_INIT_DATA: UByte = 0x12u // array.init_data
  const val GC_ARRAY_INIT_ELEM: UByte = 0x13u // array.init_elem
  const val GC_REF_TEST: UByte = 0x14u // ref.test
  const val GC_REF_TEST_NULL: UByte = 0x15u // ref.test null
  const val GC_REF_CAST: UByte = 0x16u // ref.cast
  const val GC_REF_CAST_NULL: UByte = 0x17u // ref.cast null
  const val GC_BR_ON_CAST: UByte = 0x18u // br_on_cast
  const val GC_BR_ON_CAST_FAIL: UByte = 0x19u // br_on_cast_fail
  const val GC_ANY_CONVERT_EXTERN: UByte = 0x1au // any.convert_extern
  const val GC_EXTERN_CONVERT_ANY: UByte = 0x1bu // extern.convert_any
  const val GC_REF_I31: UByte = 0x1cu // ref.i31
  const val GC_I31_GET_S: UByte = 0x1du // i31.get_s
  const val GC_I31_GET_U: UByte = 0x1eu // i31.get_u
  const val GC_REF_CAST_NOP: UByte = 0x4cu // ref.cast_nop

  // ---===Stringref proposal===--- //
  const val GC_STRING_NEW_UTF8: UByte = 0x80u // string.new_utf8
  const val GC_STRING_NEW_WTF16: UByte = 0x81u // string.new_wtf16
  const val GC_STRING_CONST: UByte = 0x82u // string.const
  const val GC_STRING_MEASURE_UTF8: UByte = 0x83u // string.measure_utf8
  const val GC_STRING_MEASURE_WTF8: UByte = 0x84u // string.measure_wtf8
  const val GC_STRING_MEASURE_WTF16: UByte = 0x85u // string.measure_wtf16
  const val GC_STRING_ENCODE_UTF8: UByte = 0x86u // string.encode_utf8
  const val GC_STRING_ENCODE_WTF16: UByte = 0x87u // string.encode_wtf16
  const val GC_STRING_CONCAT: UByte = 0x88u // string.concat
  const val GC_STRING_EQ: UByte = 0x89u // string.eq
  const val GC_STRING_IS_USV_SEQUENCE: UByte = 0x8au // string.is_usv_sequence
  const val GC_STRING_NEW_LOSSY_UTF8: UByte = 0x8bu // string.new_lossy_utf8
  const val GC_STRING_NEW_WTF8: UByte = 0x8cu // string.new_wtf8
  const val GC_STRING_ENCODE_LOSSY_UTF8: UByte = 0x8du // string.encode_lossy_utf8
  const val GC_STRING_ENCODE_WTF8: UByte = 0x8eu // string.encode_wtf8
  const val GC_STRING_NEW_UTF8_TRY: UByte = 0x8fu // string.new_utf8_try
  const val GC_STRING_AS_WTF8: UByte = 0x90u // string.as_wtf8
  const val GC_STRINGVIEW_WTF8_ADVANCE: UByte = 0x91u // stringview_wtf8.advance
  const val GC_STRINGVIEW_WTF8_ENCODE_UTF8: UByte = 0x92u // stringview_wtf8.encode_utf8
  const val GC_STRINGVIEW_WTF8_SLICE: UByte = 0x93u // stringview_wtf8.slice
  const val GC_STRINGVIEW_WTF8_ENCODE_LOSSY_UTF8: UByte = 0x94u // stringview_wtf8.encode_lossy_utf8
  const val GC_STRINGVIEW_WTF8_ENCODE_WTF8: UByte = 0x95u // stringview_wtf8.encode_wtf8
  const val GC_STRING_AS_WTF16: UByte = 0x98u // string.as_wtf16
  const val GC_STRINGVIEW_WTF16_LENGTH: UByte = 0x99u // stringview_wtf16.length
  const val GC_STRINGVIEW_WTF16_GET_CODEUNIT: UByte = 0x9au // stringview_wtf16.get_codeunit
  const val GC_STRINGVIEW_WTF16_ENCODE: UByte = 0x9bu // stringview_wtf16.encode
  const val GC_STRINGVIEW_WTF16_SLICE: UByte = 0x9cu // stringview_wtf16.slice
  const val GC_STRING_AS_ITER: UByte = 0xa0u // string.as_iter
  const val GC_STRINGVIEW_ITER_NEXT: UByte = 0xa1u // stringview_iter.next
  const val GC_STRINGVIEW_ITER_ADVANCE: UByte = 0xa2u // stringview_iter.advance
  const val GC_STRINGVIEW_ITER_REWIND: UByte = 0xa3u // stringview_iter.rewind
  const val GC_STRINGVIEW_ITER_SLICE: UByte = 0xa4u // stringview_iter.slice
  const val GC_STRING_COMPARE: UByte = 0xa8u // string.compare
  const val GC_STRING_FROM_CODE_POINT: UByte = 0xa9u // string.from_code_point
  const val GC_STRING_HASH: UByte = 0xaau // string.hash
  const val GC_STRING_NEW_UTF8_ARRAY: UByte = 0xb0u // string.new_utf8_array
  const val GC_STRING_NEW_WTF16_ARRAY: UByte = 0xb1u // string.new_wtf16_array
  const val GC_STRING_ENCODE_UTF8_ARRAY: UByte = 0xb2u // string.encode_utf8_array
  const val GC_STRING_ENCODE_WTF16_ARRAY: UByte = 0xb3u // string.encode_wtf16_array
  const val GC_STRING_NEW_LOSSY_UTF8_ARRAY: UByte = 0xb4u // string.new_lossy_utf8_array
  const val GC_STRING_NEW_WTF8_ARRAY: UByte = 0xb5u // string.new_wtf8_array
  const val GC_STRING_ENCODE_LOSSY_UTF8_ARRAY: UByte = 0xb6u // string.encode_lossy_utf8_array
  const val GC_STRING_ENCODE_WTF8_ARRAY: UByte = 0xb7u // string.encode_wtf8_array
  const val GC_STRING_NEW_UTF8_ARRAY_TRY: UByte = 0xb8u // string.new_utf8_array_try
}
